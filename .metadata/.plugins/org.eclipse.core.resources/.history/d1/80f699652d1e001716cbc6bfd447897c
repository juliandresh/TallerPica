package co.com.foundation.mtx.reporting.model;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Date;
import java.util.List;
import javax.persistence.Basic;
import javax.persistence.Cacheable;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

@Entity
@Table(name = "MAINTENANCE_EXECUTION")
@Cacheable(false)
@NamedQueries({
    @NamedQuery(name = "MaintenanceExecution.findAll", query = "SELECT m FROM MaintenanceExecution m")
    , @NamedQuery(name = "MaintenanceExecution.findById", query = "SELECT m FROM MaintenanceExecution m WHERE m.id = :id")
    , @NamedQuery(name = "MaintenanceExecution.findByDescription", query = "SELECT m FROM MaintenanceExecution m WHERE m.description = :description")
    , @NamedQuery(name = "MaintenanceExecution.findByStatus", query = "SELECT m FROM MaintenanceExecution m WHERE m.status = :status")
    , @NamedQuery(name = "MaintenanceExecution.findByExectutionDate", query = "SELECT m FROM MaintenanceExecution m WHERE m.exectutionDate = :exectutionDate")
    , @NamedQuery(name = "MaintenanceExecution.findByAircraftType", query = "SELECT m FROM MaintenanceExecution m WHERE m.aircraftType = :aircraftType")})
public class MaintenanceExecution implements Serializable {

    private static final long serialVersionUID = 1L;
    
    @Id
    @Basic(optional = false)
    @NotNull
    @Column(name = "ID")
    private BigDecimal id;
    
    @Size(max = 200)
    @Column(name = "DESCRIPTION")
    private String description;
    
    @Size(max = 20)
    @Column(name = "STATUS")
    private String status;
    
    @Column(name = "EXECTUTION_DATE")
    @Temporal(TemporalType.TIMESTAMP)
    private Date exectutionDate;
    
    @Size(max = 20)
    @Column(name = "AIRCRAFT_TYPE")
    private String aircraftType;
    
    @JoinTable(name = "MAINTENANCE_ASSIGMENTS", joinColumns = {
        @JoinColumn(name = "MAINTENANCE_ID", referencedColumnName = "ID")}, inverseJoinColumns = {
        @JoinColumn(name = "OPERATOR_ID", referencedColumnName = "ID")})
    @ManyToMany
    private List<Operator> operatorList;
    
    @OneToMany(mappedBy = "maintenanceId")
    private List<MaintenanceNote> maintenanceNoteList;

    public MaintenanceExecution() {
    }

    public MaintenanceExecution(BigDecimal id) {
        this.id = id;
    }

    public BigDecimal getId() {
        return id;
    }

    public void setId(BigDecimal id) {
        this.id = id;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public Date getExectutionDate() {
        return exectutionDate;
    }

    public void setExectutionDate(Date exectutionDate) {
        this.exectutionDate = exectutionDate;
    }

    public String getAircraftType() {
        return aircraftType;
    }

    public void setAircraftType(String aircraftType) {
        this.aircraftType = aircraftType;
    }

    public List<Operator> getOperatorList() {
        return operatorList;
    }

    public void setOperatorList(List<Operator> operatorList) {
        this.operatorList = operatorList;
    }

    public List<MaintenanceNote> getMaintenanceNoteList() {
        return maintenanceNoteList;
    }

    public void setMaintenanceNoteList(List<MaintenanceNote> maintenanceNoteList) {
        this.maintenanceNoteList = maintenanceNoteList;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (id != null ? id.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof MaintenanceExecution)) {
            return false;
        }
        MaintenanceExecution other = (MaintenanceExecution) object;
        if ((this.id == null && other.id != null) || (this.id != null && !this.id.equals(other.id))) {
            return false;
        }
        return true;
    }
/*
	@Override
	public String toString() {
		return "MaintenanceExecution [id=" + id + ", description=" + description + ", status=" + status
				+ ", exectutionDate=" + exectutionDate + ", aircraftType=" + aircraftType + "]";
	}
*/
}
